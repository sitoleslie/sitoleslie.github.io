////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = start < end ? 1 : -1) {
  const arr = [];

// check if step is greather than zero
  if (step > 0) {
    // push in the range into the array 
    for (let i = start; i <= end; i += step) arr.push(i);
    // if start is the same as end
    // just return the arr
  } else if (start === end){ 
    return arr;
  }
  else {
    // otherwise, return the array counting down
    for (let i = start; i >= end; i += step) arr.push(i);
  }
  return arr;

}
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {


// I: an array of numbers
return array.reduce((sum, element) => {
// reassign the seed to each iteration 
sum += element; 
return sum;
}, 0);

// returns the sum 




}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
// input: an array 
if(!array.length){
  return [];
}


//o: an array reverse 
return reverseArray(array.slice(1)).concat([array[0]]);

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  // input: an array 
  
  var i = 0,
      n = array.length,
      // using math.floor to round down
      middle = Math.floor(n / 2),
      swap = null;
// iterate over half the array 
  for (; i < middle; i += 1) {
    // swap the elements using the swap var above
     swap = array[i];
     array[i] = array[n - 1 - i];
     array[n - 1 - i] = swap;
  }

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
// i: each object holding the next object 

let list = null;

// iterate
  for (let i = array.length - 1; i >= 0; i--) {
    // reassign the list to the values 
    list = {value: array[i], rest: list};
}
return list; 
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let arr = [];
  for (let node = list; node; node = node.rest) {
    arr.push(node.value);
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  // return the value and the new list
 return {value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, element) {
// check if the element is int he list or return undefined 
 if (!list) return undefined;
 // check if the element is 0
  else if (element == 0) return list.value;
  // the recurive call will reach the list's end , which would equal null
  else return nth(list.rest, element - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  // check if theyre both equal
  if (x === y) return true;
  
  // check if they're objects 
  if (x == null || typeof x != "object" ||
      y == null || typeof y != "object") return false;

// assign x and y as objects 
  let keysA = Object.keys(x), keysB = Object.keys(y);


// check for the numbers of keys
  if (keysA.length != keysB.length) return false;
//iterate
  for (let key of keysA) {
    //recurive call:
    if (!keysB.includes(key) || !deepEqual(x[key], y[key])) return false;
  }

  return true;
}

let obj = {here: {is: "an"}, object: 2};


////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
